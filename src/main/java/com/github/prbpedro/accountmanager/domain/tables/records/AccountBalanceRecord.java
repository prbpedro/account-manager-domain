/*
 * This file is generated by jOOQ.
 */
package com.github.prbpedro.accountmanager.domain.tables.records;


import com.github.prbpedro.accountmanager.domain.tables.AccountBalance;

import java.math.BigDecimal;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountBalanceRecord extends UpdatableRecordImpl<AccountBalanceRecord> implements Record4<Long, BigDecimal, String, Long> {

    private static final long serialVersionUID = -1940054795;

    /**
     * Setter for <code>AC_DATABASE.ACCOUNT_BALANCE.ID</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>AC_DATABASE.ACCOUNT_BALANCE.ID</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>AC_DATABASE.ACCOUNT_BALANCE.VALUE</code>.
     */
    public void setValue(BigDecimal value) {
        set(1, value);
    }

    /**
     * Getter for <code>AC_DATABASE.ACCOUNT_BALANCE.VALUE</code>.
     */
    public BigDecimal getValue() {
        return (BigDecimal) get(1);
    }

    /**
     * Setter for <code>AC_DATABASE.ACCOUNT_BALANCE.ACCOUNT_ID</code>.
     */
    public void setAccountId(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>AC_DATABASE.ACCOUNT_BALANCE.ACCOUNT_ID</code>.
     */
    public String getAccountId() {
        return (String) get(2);
    }

    /**
     * Setter for <code>AC_DATABASE.ACCOUNT_BALANCE.CURRENCY_ID</code>.
     */
    public void setCurrencyId(Long value) {
        set(3, value);
    }

    /**
     * Getter for <code>AC_DATABASE.ACCOUNT_BALANCE.CURRENCY_ID</code>.
     */
    public Long getCurrencyId() {
        return (Long) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Long, BigDecimal, String, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Long, BigDecimal, String, Long> valuesRow() {
        return (Row4) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field1() {
        return AccountBalance.ACCOUNT_BALANCE.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<BigDecimal> field2() {
        return AccountBalance.ACCOUNT_BALANCE.VALUE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return AccountBalance.ACCOUNT_BALANCE.ACCOUNT_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field4() {
        return AccountBalance.ACCOUNT_BALANCE.CURRENCY_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long component1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BigDecimal component2() {
        return getValue();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component3() {
        return getAccountId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long component4() {
        return getCurrencyId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BigDecimal value2() {
        return getValue();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getAccountId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value4() {
        return getCurrencyId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountBalanceRecord value1(Long value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountBalanceRecord value2(BigDecimal value) {
        setValue(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountBalanceRecord value3(String value) {
        setAccountId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountBalanceRecord value4(Long value) {
        setCurrencyId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountBalanceRecord values(Long value1, BigDecimal value2, String value3, Long value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AccountBalanceRecord
     */
    public AccountBalanceRecord() {
        super(AccountBalance.ACCOUNT_BALANCE);
    }

    /**
     * Create a detached, initialised AccountBalanceRecord
     */
    public AccountBalanceRecord(Long id, BigDecimal value, String accountId, Long currencyId) {
        super(AccountBalance.ACCOUNT_BALANCE);

        set(0, id);
        set(1, value);
        set(2, accountId);
        set(3, currencyId);
    }
}
