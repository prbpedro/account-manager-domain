/*
 * This file is generated by jOOQ.
 */
package com.github.prbpedro.accountmanager.domain.tables;


import com.github.prbpedro.accountmanager.domain.AcDatabase;
import com.github.prbpedro.accountmanager.domain.Indexes;
import com.github.prbpedro.accountmanager.domain.Keys;
import com.github.prbpedro.accountmanager.domain.tables.records.AccountTransactionRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountTransaction extends TableImpl<AccountTransactionRecord> {

    private static final long serialVersionUID = 939533799;

    /**
     * The reference instance of <code>AC_DATABASE.ACCOUNT_TRANSACTION</code>
     */
    public static final AccountTransaction ACCOUNT_TRANSACTION = new AccountTransaction();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountTransactionRecord> getRecordType() {
        return AccountTransactionRecord.class;
    }

    /**
     * The column <code>AC_DATABASE.ACCOUNT_TRANSACTION.ID</code>.
     */
    public final TableField<AccountTransactionRecord, Long> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>AC_DATABASE.ACCOUNT_TRANSACTION.DATE_TIME</code>.
     */
    public final TableField<AccountTransactionRecord, Timestamp> DATE_TIME = createField("DATE_TIME", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>AC_DATABASE.ACCOUNT_TRANSACTION.STATUS</code>.
     */
    public final TableField<AccountTransactionRecord, String> STATUS = createField("STATUS", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>AC_DATABASE.ACCOUNT_TRANSACTION.VALUE</code>.
     */
    public final TableField<AccountTransactionRecord, BigDecimal> VALUE = createField("VALUE", org.jooq.impl.SQLDataType.DECIMAL(19, 2).nullable(false), this, "");

    /**
     * The column <code>AC_DATABASE.ACCOUNT_TRANSACTION.BENEFICIARY_ID</code>.
     */
    public final TableField<AccountTransactionRecord, String> BENEFICIARY_ID = createField("BENEFICIARY_ID", org.jooq.impl.SQLDataType.VARCHAR(500).nullable(false), this, "");

    /**
     * The column <code>AC_DATABASE.ACCOUNT_TRANSACTION.CURRENCY_ID</code>.
     */
    public final TableField<AccountTransactionRecord, Long> CURRENCY_ID = createField("CURRENCY_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>AC_DATABASE.ACCOUNT_TRANSACTION.SENDER_ID</code>.
     */
    public final TableField<AccountTransactionRecord, String> SENDER_ID = createField("SENDER_ID", org.jooq.impl.SQLDataType.VARCHAR(500).nullable(false), this, "");

    /**
     * Create a <code>AC_DATABASE.ACCOUNT_TRANSACTION</code> table reference
     */
    public AccountTransaction() {
        this(DSL.name("ACCOUNT_TRANSACTION"), null);
    }

    /**
     * Create an aliased <code>AC_DATABASE.ACCOUNT_TRANSACTION</code> table reference
     */
    public AccountTransaction(String alias) {
        this(DSL.name(alias), ACCOUNT_TRANSACTION);
    }

    /**
     * Create an aliased <code>AC_DATABASE.ACCOUNT_TRANSACTION</code> table reference
     */
    public AccountTransaction(Name alias) {
        this(alias, ACCOUNT_TRANSACTION);
    }

    private AccountTransaction(Name alias, Table<AccountTransactionRecord> aliased) {
        this(alias, aliased, null);
    }

    private AccountTransaction(Name alias, Table<AccountTransactionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> AccountTransaction(Table<O> child, ForeignKey<O, AccountTransactionRecord> key) {
        super(child, key, ACCOUNT_TRANSACTION);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return AcDatabase.AC_DATABASE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FKCRTHG890SSJVT69F4IUENU92P_INDEX_2, Indexes.FKF9CEM1VWYK13W14X2WY2I7CK_INDEX_2, Indexes.FKTDC7RHIN60BXAHWAN5FNWCSA6_INDEX_2, Indexes.PRIMARY_KEY_2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AccountTransactionRecord, Long> getIdentity() {
        return Keys.IDENTITY_ACCOUNT_TRANSACTION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AccountTransactionRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_2;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AccountTransactionRecord>> getKeys() {
        return Arrays.<UniqueKey<AccountTransactionRecord>>asList(Keys.CONSTRAINT_2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<AccountTransactionRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AccountTransactionRecord, ?>>asList(Keys.FKTDC7RHIN60BXAHWAN5FNWCSA6, Keys.FKCRTHG890SSJVT69F4IUENU92P, Keys.FKF9CEM1VWYK13W14X2WY2I7CK);
    }

    public Account fktdc7rhin60bxahwan5fnwcsa6() {
        return new Account(this, Keys.FKTDC7RHIN60BXAHWAN5FNWCSA6);
    }

    public Currency currency() {
        return new Currency(this, Keys.FKCRTHG890SSJVT69F4IUENU92P);
    }

    public Account fkf9cem1vwyk13w14x2wy2i7ck() {
        return new Account(this, Keys.FKF9CEM1VWYK13W14X2WY2I7CK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountTransaction as(String alias) {
        return new AccountTransaction(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountTransaction as(Name alias) {
        return new AccountTransaction(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountTransaction rename(String name) {
        return new AccountTransaction(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountTransaction rename(Name name) {
        return new AccountTransaction(name, null);
    }
}
