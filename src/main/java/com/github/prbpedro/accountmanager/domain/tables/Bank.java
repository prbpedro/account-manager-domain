/*
 * This file is generated by jOOQ.
 */
package com.github.prbpedro.accountmanager.domain.tables;


import com.github.prbpedro.accountmanager.domain.AcDatabase;
import com.github.prbpedro.accountmanager.domain.Indexes;
import com.github.prbpedro.accountmanager.domain.Keys;
import com.github.prbpedro.accountmanager.domain.tables.records.BankRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Bank extends TableImpl<BankRecord> {

    private static final long serialVersionUID = 1850578368;

    /**
     * The reference instance of <code>AC_DATABASE.BANK</code>
     */
    public static final Bank BANK = new Bank();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BankRecord> getRecordType() {
        return BankRecord.class;
    }

    /**
     * The column <code>AC_DATABASE.BANK.ID</code>.
     */
    public final TableField<BankRecord, Long> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>AC_DATABASE.BANK.CODE</code>.
     */
    public final TableField<BankRecord, String> CODE = createField("CODE", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * Create a <code>AC_DATABASE.BANK</code> table reference
     */
    public Bank() {
        this(DSL.name("BANK"), null);
    }

    /**
     * Create an aliased <code>AC_DATABASE.BANK</code> table reference
     */
    public Bank(String alias) {
        this(DSL.name(alias), BANK);
    }

    /**
     * Create an aliased <code>AC_DATABASE.BANK</code> table reference
     */
    public Bank(Name alias) {
        this(alias, BANK);
    }

    private Bank(Name alias, Table<BankRecord> aliased) {
        this(alias, aliased, null);
    }

    private Bank(Name alias, Table<BankRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Bank(Table<O> child, ForeignKey<O, BankRecord> key) {
        super(child, key, BANK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return AcDatabase.AC_DATABASE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRIMARY_KEY_1, Indexes.UNIQUE_CODE_INDEX_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<BankRecord, Long> getIdentity() {
        return Keys.IDENTITY_BANK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BankRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_1;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BankRecord>> getKeys() {
        return Arrays.<UniqueKey<BankRecord>>asList(Keys.CONSTRAINT_1, Keys.UNIQUE_CODE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Bank as(String alias) {
        return new Bank(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Bank as(Name alias) {
        return new Bank(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Bank rename(String name) {
        return new Bank(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Bank rename(Name name) {
        return new Bank(name, null);
    }
}
